#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

// --- Helper Functions ---

function parseArgs(args) {
    const options = { _: [] };
    for (let i = 0; i < args.length; i++) {
        if (args[i].startsWith('--')) {
            const key = args[i].substring(2);
            const value = (i + 1 < args.length && !args[i + 1].startsWith('--')) ? args[i + 1] : true;
            options[key] = value;
            if (value !== true) i++; // Skip value in next iteration
        } else {
            options._.push(args[i]);
        }
    }
    return options;
}

function logSuccess(message) {
    console.log(`✅ ${message}`);
}

function logError(message) {
    console.error(`❌ Error: ${message}`);
}

function logInfo(message) {
    console.log(`ℹ️  ${message}`);
}

function ensureDirectoryExists(dirPath) {
    if (fs.existsSync(dirPath)) {
        throw new Error(`Directory already exists: ${dirPath}. Use a different path or delete the existing one.`);
    }
    fs.mkdirSync(dirPath, { recursive: true });
    logSuccess(`Created directory: ${dirPath}`);
}

function writeTemplateFile(filePath, content) {
    fs.writeFileSync(filePath, content.trim() + '\n'); // Ensure trailing newline
    logSuccess(`Generated ${path.basename(filePath)}`);
}

// --- Template Definitions ---

const mockServerTemplates = {
  'package.json': (projectName) => `{
  "name": "${projectName}",
  "version": "1.0.0",
  "description": "A basic mock API server using Express and Faker.js",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "node --watch server.js"
  },
  "keywords": ["mock", "api", "server", "express", "faker"],
  "author": "Generated by Rules-LLM-Coding",
  "license": "MIT",
  "dependencies": {
    "@faker-js/faker": "^8.4.1",
    "cors": "^2.8.5",
    "express": "^4.19.2"
  }
}`,

  'server.js': (port) => `const express = require('express');
const cors = require('cors'); // Enable Cross-Origin Resource Sharing
const { faker } = require('@faker-js/faker');

const app = express();
// Use port from environment variable or default to the one specified during generation
const PORT = process.env.PORT || ${port};

app.use(cors()); // Allow requests from frontend development servers
app.use(express.json()); // Parse JSON request bodies

// --- Data Generation ---

const generateUser = (id) => ({
  id: id || faker.string.uuid(),
  firstName: faker.person.firstName(),
  lastName: faker.person.lastName(),
  email: faker.internet.email(),
  avatar: faker.image.avatar(),
  jobTitle: faker.person.jobTitle(),
  createdAt: faker.date.past(),
  updatedAt: faker.date.recent(),
});

// Generate a cache of users to simulate persistence across requests
const USER_CACHE_SIZE = 20;
const usersCache = new Map();
for (let i = 0; i < USER_CACHE_SIZE; i++) {
  const user = generateUser();
  usersCache.set(user.id, user);
}

console.log(\`Generated \${usersCache.size} mock users.\`);

// --- Mock API Endpoints ---

// GET /users - List users with basic pagination simulation
app.get('/users', (req, res) => {
  console.log(\`GET /users received (query: \${JSON.stringify(req.query)})\`);
  const page = parseInt(req.query.page || '1', 10);
  const limit = parseInt(req.query.limit || '10', 10);
  const sortBy = req.query.sortBy || 'createdAt';
  const order = req.query.order || 'desc'; // 'asc' or 'desc'

  const allUsers = Array.from(usersCache.values());

  // Simple sorting
  allUsers.sort((a, b) => {
      let comparison = 0;
      if (a[sortBy] < b[sortBy]) comparison = -1;
      if (a[sortBy] > b[sortBy]) comparison = 1;
      return order === 'desc' ? comparison * -1 : comparison;
  });

  const startIndex = (page - 1) * limit;
  const endIndex = page * limit;
  const results = allUsers.slice(startIndex, endIndex);
  const totalItems = allUsers.length;
  const totalPages = Math.ceil(totalItems / limit);

  // Simulate API response delay
  setTimeout(() => {
    res.json({
      data: results,
      meta: {
        currentPage: page,
        itemsPerPage: limit,
        totalItems: totalItems,
        totalPages: totalPages,
      },
    });
  }, faker.number.int({ min: 100, max: 500 })); // Simulate 100-500ms delay
});

// GET /users/:id - Get a specific user
app.get('/users/:id', (req, res) => {
  const { id } = req.params;
  console.log(\`GET /users/\${id} received\`);
  const user = usersCache.get(id);

  // Simulate API response delay
  setTimeout(() => {
    if (user) {
      res.json(user);
    } else {
      res.status(404).json({ error: 'User not found' });
    }
  }, faker.number.int({ min: 50, max: 300 }));
});

// POST /users - Create a new user
app.post('/users', (req, res) => {
  console.log(\`POST /users received (body: \${JSON.stringify(req.body)})\`);
  const { firstName, lastName, email } = req.body;

  // Basic validation example
  if (!firstName || !lastName || !email) {
    return res.status(400).json({ error: 'Missing required fields: firstName, lastName, email' });
  }

  const newUser = generateUser(); // Generate a new user with a new ID
  newUser.firstName = firstName;
  newUser.lastName = lastName;
  newUser.email = email; // Use provided email if valid
  newUser.createdAt = new Date();
  newUser.updatedAt = new Date();

  usersCache.set(newUser.id, newUser);
  console.log(\`Created user \${newUser.id}\`);

  // Simulate API response delay
  setTimeout(() => {
    res.status(201).json(newUser);
  }, faker.number.int({ min: 200, max: 600 }));
});

// PUT /users/:id - Update an existing user
app.put('/users/:id', (req, res) => {
    const { id } = req.params;
    console.log(\`PUT /users/\${id} received (body: \${JSON.stringify(req.body)})\`);
    const existingUser = usersCache.get(id);

    if (!existingUser) {
        return setTimeout(() => res.status(404).json({ error: 'User not found' }), faker.number.int({ min: 50, max: 300 }));
    }

    // Update only provided fields (simple merge)
    const updatedFields = req.body;
    const updatedUser = { ...existingUser, ...updatedFields, updatedAt: new Date() };

    // Ensure ID is not changed
    updatedUser.id = id;

    usersCache.set(id, updatedUser);
    console.log(\`Updated user \${id}\`);

    setTimeout(() => {
        res.json(updatedUser);
    }, faker.number.int({ min: 150, max: 450 }));
});

// DELETE /users/:id - Delete a user
app.delete('/users/:id', (req, res) => {
  const { id } = req.params;
  console.log(\`DELETE /users/\${id} received\`);

  // Simulate API response delay
  setTimeout(() => {
    if (usersCache.has(id)) {
      usersCache.delete(id);
      console.log(\`Deleted user \${id}\`);
      res.status(204).send(); // No content on successful delete
    } else {
      res.status(404).json({ error: 'User not found' });
    }
  }, faker.number.int({ min: 250, max: 700 }));
});

// Catch-all for undefined routes
app.use((req, res) => {
  console.log(\`404 Not Found: \${req.method} \${req.originalUrl}\`);
  res.status(404).send({ error: 'Not Found' });
});

// --- Start Server ---
app.listen(PORT, () => {
  console.log(\`\\n🚀 Basic Mock API server listening at http://localhost:\${PORT}\`);
  console.log('Available endpoints:');
  console.log(\`  GET    http://localhost:\${PORT}/users\`);
  console.log(\`  GET    http://localhost:\${PORT}/users/:id\`);
  console.log(\`  POST   http://localhost:\${PORT}/users\`);
  console.log(\`  PUT    http://localhost:\${PORT}/users/:id\`);
  console.log(\`  DELETE http://localhost:\${PORT}/users/:id\`);
  console.log('\\nUse Ctrl+C to stop.');
});`,

  'Dockerfile': () => `# Use an official Node.js runtime as a parent image
FROM node:20-alpine AS base

WORKDIR /usr/src/app

COPY package*.json ./
RUN npm ci --only=production

COPY . .

# Port is now determined by env var or the value in server.js
# EXPOSE is more for documentation here; the actual port is set in server.js
# You might need to map the correct port during deployment
EXPOSE 3001

CMD [ "node", "server.js" ]`,

  'README.md': (projectName, dirPath, port) => `# ${projectName} - Basic Node.js Mock API Server

This directory contains a simple mock API server built with Node.js, Express, and Faker.js, generated by the \`Rules-LLM-Coding\` scaffolding script. It simulates a basic \`/users\` REST API endpoint structure.

## Purpose

- Provide a quick-start mock API for frontend development.
- Demonstrate generating fake data with Faker.js.
- Show basic routing and response simulation with Express.

## Setup

1.  **Prerequisites:** Ensure you have [Node.js](https://nodejs.org/) (v18 or later recommended) and npm installed.
2.  **Install Dependencies:** Navigate to this directory (\`${dirPath}\`) in your terminal and run:
    \`\`\`bash
    npm install
    \`\`\`

## Running the Server

You can run the server in two ways:

1.  **Standard Start:**
    \`\`\`bash
    npm start
    \`\`\`
    The server will start on \`http://localhost:${port}\` (or the port specified by the \`PORT\` environment variable).

2.  **Development Mode (with auto-restart on changes):**
    > Requires Node.js v18.11.0 or later.
    \`\`\`bash
    npm run dev
    \`\`\`
    The server will start and automatically restart if you modify \`server.js\`.

## Available Endpoints

The server mocks the following endpoints on \`http://localhost:${port}\`:

- \`GET /users\`
- \`GET /users/:id\`
- \`POST /users\`
- \`PUT /users/:id\`
- \`DELETE /users/:id\`

(Refer to \`server.js\` for details on request/response formats and simulated delays.)

## Deployment

This server includes a \`Dockerfile\` and can be deployed to various PaaS providers like Render or Fly.io.

### Option 1: Render
(See general Render documentation - ensure you set the Root Directory correctly to \`${dirPath}\` relative to your repo root and the start command is \`node server.js\`.)

### Option 2: Fly.io
(Navigate to \`${dirPath}\` and run \`fly launch\`. It should detect the Dockerfile.)

### General Considerations
- Use environment variables (e.g., \`PORT\`) for configuration on your hosting platform.
- HTTPS is usually handled automatically by the PaaS.
`,

  '.dockerignore': () => `.git
node_modules
npm-debug.log
Dockerfile
.dockerignore
README.md
`
};

// --- Main Logic ---

const args = parseArgs(process.argv.slice(2));
const command = args._[0];

if (!command) {
    logInfo('Usage: node scripts/generate.js <template_type> [options]');
    logInfo('Available types: mock-server');
    logInfo('Options for mock-server:');
    logInfo('  --path <output_directory> (Required)');
    logInfo('  --port <port_number>      (Optional, default: 3001)');
    process.exit(1);
}

try {
    if (command === 'mock-server') {
        const targetPath = args.path;
        const port = args.port || 3001;

        if (!targetPath) {
            throw new Error('--path option is required for mock-server');
        }

        const absoluteTargetPath = path.resolve(targetPath);
        const projectName = path.basename(absoluteTargetPath);

        ensureDirectoryExists(absoluteTargetPath);

        writeTemplateFile(path.join(absoluteTargetPath, 'package.json'), mockServerTemplates['package.json'](projectName));
        writeTemplateFile(path.join(absoluteTargetPath, 'server.js'), mockServerTemplates['server.js'](port));
        writeTemplateFile(path.join(absoluteTargetPath, 'Dockerfile'), mockServerTemplates['Dockerfile']());
        writeTemplateFile(path.join(absoluteTargetPath, 'README.md'), mockServerTemplates['README.md'](projectName, targetPath, port));
        writeTemplateFile(path.join(absoluteTargetPath, '.dockerignore'), mockServerTemplates['.dockerignore']());

        logInfo(`\nMock server '${projectName}' generated successfully in ${targetPath}`);
        logInfo(`Next steps:`);
        logInfo(`  1. cd ${targetPath}`);
        logInfo(`  2. npm install`);
        logInfo(`  3. npm start (or npm run dev)`);

    } else {
        throw new Error(`Unknown template type: ${command}`);
    }
    process.exit(0);
} catch (error) {
    logError(error.message);
    process.exit(1);
}